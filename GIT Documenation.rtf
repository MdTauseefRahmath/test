{\rtf1\ansi\ansicpg1252\cocoartf2578
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww28600\viewh15040\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs48 \cf0 Git commands\
\
When we do GIT clone we basically get the entire git repository like history, commits and latest files. It will be in the project directory under hidden file .git\
1. git add <file name> (Adds the file(s) to the staging area)\
2. git commit -m (message for commit)\
3. git status\
4. git log\
5. git diff commitID1 commitID2 (shows the files and the lines of difference between the specified two commitsId\'92s)\
5. git checkout commitID (checksout all the code for the specified commitId from the repository and places it in your project).\
6. git status -s (Used to check the status but in short form)\
	Staged    Modified   FileName\
	   M                             File 1      (means Modified file in the staging area)\
	   M 				M			 File 2	   (means Modified in the staging area as well as in the Working Directory)\
	   A							 File 3      (new file added to the staging area)\
	   ?				?			 File 4 	   (new file created but not yet being tracked)\
7. git restore --staged <filename> (Restores the file from the staging area and marks it as new untracked file).\
8. git diff --staged (Compares our staged changes to the last committed snapshot. Changes made that are ready to be committed)\
9. git commit -a -m \'93commit message\'94(stages all the changes in the working directory that are being tracked by GIT. This way we can skip the git add option)\
10. git rm <file Name> (Tells GIT to stop tracking this file, and then we need to commit and push the changes to remove the file.)\
11. git rm --caches <file Name> (Tells GIT to stop tracking it but we can still have the file)\
12. git mv <File Name1> <File Name2> (Renames file from 1 to 2)\
\
Steps:\
1) git init (initialise an empty git repository and adds a .git file to the project)\
2) write code in the project.\
3) git add . (This command adds the file to the staging area)\
4) git commit -m \'93first commit\'94.\
5) git remote add origin https://github.com/MdTauseefRahmath/test.git (To connect our local repository to the GitHub. Acts as a link to push and pull).\
6) git push -u origin master.\
\
Origin: Origin is the repository version that sits in the GITHUB profile.\
Master: The default branch that gets created is the Master Branch. When we initialise a GIT repository a branch is created called Master.\
\
Important Point:\
There is a possibility that you have staged a file say a.txt which has some contents. Now if do (git status) we get the following result.\
Changes to be committed.\
	modified: 	a.txt\
\
Now if we have modified the contents of this staged file a.txt and added the did (git status) we get the following result.\
Changes to be committed.\
	modified: 	a.txt\
Changes not staged for commit\
	modified: 	a.txt\
\
As we see that the files a.txt is both in the staging area and modified section. Now if commit the file only the contents of the staged file gets committed.\
\
\
\
\
\
\
\
\
\
}